###########
# REST API

POST        /get_time
HEADER      Content-Type:application/json
REQUEST     {}
RESPONSE    "result": <string>
    result: timestring in format Y-m-d H:i:s


POST        /users/create
HEADER      Content-Type:application/json
REQUEST     {"name": <string>}
    name: user's screen name
RESPONSE  "result": {"id": <int>, "token": <string>}
    id: user's ID
    token: user's authentication token


POST        /rooms/list
HEADER      Content-Type:application/json
REQUEST     {}
RESPONSE    "result":
            [{
                "id": <int>
                "name": <string>
            }]
    id: chat rooms's ID
    name: chat rooms's display name


POST        /rooms/create
HEADER      Content-Type:application/json
REQUEST     {"name": <string>, "password": <string>}
    name: chat room's display name
    password: chat room's password
RESPONSE    "result": <int>
    result: chat rooms's ID


POST        /rooms/join
HEADER      Content-Type:application/json
REQUEST     {"chat_id": <int>, "user_id": <int>, "password": <string>}
    id: chat room's ID
    user_id: joining user's ID
    password: chat room's password
RESPONSE    "result": <bool>
    result: 1 on success, 0 if password wrong


POST        /rooms/leave
HEADER      Content-Type:application/json
REQUEST     {"user_id": <int>}
    user_id: leaving user's ID
RESPONSE    "result": <bool>
    result: 1 on success, 0 otherwise


POST        /users/list
HEADER      Content-Type:application/json
REQUEST     {"chat_id": <int>}
    chat_id: chat room's id
RESPONSE    "result":
            [{
                "name": <string>,
                "id": <int>
            }]
    name: user's name
    id: users's ID


POST        /messages/list
HEADERS     Content-Type:application/json
REQUEST     {"chat_id": <int>, "since": <int>}
    chat_id: which chat room's messages
    since: id of last received message
RESPONSE    "result":
            [{
                "id": <int>,
                "user_id" <int>,
                "message": <string>
            }]
    id: message's ID
    user_id: which user's message
    message: message content


POST        /messages/post*
HEADERS     Content-Type:application/json
REQUEST     {"user_id": <int>, "chat_id": <int>, "message": <string>}
    user_id: posting user's ID
    chat_id: which chat room to post message in
    message: message content
RESPONSE    "result": <int>
    result: posted message's ID
FOOTNOTES
    *If sockets are used, then this should be ignored (use "post message" socket call instead)


POST        /workspaces/content
HEADERS     Content-Type:application/json
REQUEST     {"chat_id": <int>}
    chat_id: which chat room's workspace text field to get
RESPONSE     "result": {"content": <string>, "last_update": <int>}
    content: The entire text content of workspace
    last_update: The update ID of the latest change to content


POST        /workspaces/updates
HEADERS     Content-Type:application/json
REQUEST     {"chat_id": <int>, "since": <int>, "caret_pos": <int>}
    chat_id: which chat room's workspace
    since: update ID of the last fetched update
    caret_pos: requesting user's caret position in workspace
RESPONSE    "result": {
                "caret_pos": <int>,
                "updates": [{
                    "id": <int>,
                    "user_id": <int>,
                    "mode" <string>,
                    "input": <string>
                    "len": <int>
                }]
            }
    caret_pos:  new caret position adjusted for fetched updates
    id:         update ID
    user_id:    ID of user who committed update
    mode:       'insert' or 'remove'
    pos:        where in string to insert/remove (range of removal to left from pos, insert to the right)
    input:      inputted string if mode is 'insert', or an empty string if mode is 'remove'
    len:        length of input or removal


POST        /workspaces/insert*
HEADERS     Content-Type:application/json
REQUEST     {"chat_id": <int>, "user_id": <int>, "pos": <int>, "since": <int>, "input": <string>}
    chat_id: which chat room's workspace to edit
    user_id: who is editing
    pos: where in workspace text to insert
    since: update ID of the last fetched update
    content: the input string
RESPONSE    "result": <int>
    result: update ID of the insertion
FOOTNOTES
    *If sockets are used, then this should be ignored (use "edit workspace" socket call instead)


POST        /workspaces/remove*
HEADERS     Content-Type:application/json
REQUEST     {"chat_id": <int>, "user_id": <int>, "pos": <int>, "since": >int>, "len": <int>}
    chat_id: which chat room's workspace to edit
    user_id: who is editing
    pos: where in workspace text to remove
    since: update ID of the last fetched update
    len: how many characters (left from pos)
RESPONSE    "result": <int>
    result: update ID of the removal
FOOTNOTES
    *If sockets are used, then this should be ignored (use "edit workspace" socket call instead)


##############
# SOCKETS API:

METHOD      'connection' (handshake)
PARAMETERS: "query": {"user_id": <int>, "chat_id": <int>, "token": <string>}
EMITS       'update users'


METHOD      'post message'
PARAMETERS  {"content": <string>}
    content: the message string
EMITS       'update messages'


METHOD      'edit workspace'
PARAMETERS  {"pos": <int>, "since": <int>, "insert": <string>, "remove": <int>}
        pos: where in workspace text to insert/remove
        since: update ID of the last fetched update
        insert*: the input string
        remove*: how many characters to remove (left from pos)
EMITS       'update workspace'
FOOTNOTES
    *Optional if the other (insert/remove) is set. If both are set, remove is ignored.


METHOD      'disconnect' (automatic)
EMITS       'update users'
