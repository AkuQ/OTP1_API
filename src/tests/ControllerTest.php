<?php
/**
 * Created by PhpStorm.
 * User: artoju
 * Date: 3.10.2017
 * Time: 13:50
 */

namespace StormChat\tests;

require_once __DIR__ . '/../autoload.php';
require_once __DIR__ . '/../../vendor/autoload.php';

use PHPUnit_Framework_TestCase;
use StormChat\Controller;
use StormChat\DB_Handler;


class ControllerTest extends PHPUnit_Framework_TestCase
{

    /** @var DB_Handler */
    private static $handler = null;
    /** @var DB_Handler */
    private static $controller = null;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::$handler = self::getMockBuilder(DB_Handler::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([["host" => "", "user" => "", "password" => "", "db" => ""]])
            ->setMethodsExcept()
            ->getMock();
        self::$controller = new Controller(self::$handler);
    }

    public function test_create_user() {

        self::$handler->method('create_user')->willReturn(1);
        $actual =  self::$controller->create_user("artsi");
        $this->assertEquals(1, $actual["id"]);
        $this->assertEquals(false, empty($actual["token"]));

    }

    public function test_list_rooms() {

        self::$handler->method('get_groups')->willReturn([0 =>["chat_id"=> 1, "name"=>"ryhma1"], 1 =>["chat_id"=> 2, "name"=>"ryhma2"]]);
        $actual = self::$controller->list_rooms();
        self::assertEquals(1, $actual[0]["id"]);
        self::assertEquals(2, $actual[1]["id"]);
    }

    public function test_create_room() {

        self::$handler->method('create_group')->with($this->equalTo("ryhma"),$this->equalTo("passw"))->willReturn(1);
        $actual =  self::$controller->create_room("ryhma", "passw");
        self::assertEquals(1, $actual);
    }

    public function test_list_users() {
        self::$handler->method('get_chat_users')->with($this->equalTo(1))->willReturn([0 =>["user_id"=>1, "name"=>"artsi"], 1=>["user_id"=>2, "name"=>"tuomas"]]);
        $actual =  self::$controller->list_users(1);
        self::assertEquals("artsi", $actual[0]["name"]);
        self::assertEquals(1, $actual[0]["id"]);
        self::assertEquals("tuomas", $actual[1]["name"]);
        self::assertEquals(2, $actual[1]["id"]);
    }

    public function test_list_messages() {
        self::$handler->method('get_messages')->with($this->equalTo(1), $this->equalTo(1))->willReturn([0 =>["user_id" => 1, "content" => "Hello world", "message_id" => 3],
            1 => ["user_id" => 2, "content" => "dlrow olleH", "message_id" => 4]]);
        $actual =  self::$controller->list_messages(1, 1);
        self::assertEquals(3, $actual[0]["id"]);
        self::assertEquals("Hello world", $actual[0]["message"]);
        self::assertEquals(1, $actual[0]["user_id"]);
        self::assertEquals(4, $actual[1]["id"]);
        self::assertEquals("dlrow olleH", $actual[1]["message"]);
        self::assertEquals(2, $actual[1]["user_id"]);

    }

    public function test_post_message() {
        self::$handler->method('post_message')->with($this->equalTo(1), $this->equalTo(1), $this->equalTo( "Hello world"))->willReturn(1);
        $actual =  self::$controller->post_message(1, 1, "Hello world");
        self::assertEquals(1, $actual);
    }

    public function test_join_chat() {

    }

    public function test_leave_chat(){

    }


}
