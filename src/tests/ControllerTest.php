<?php

namespace StormChat\tests;

require_once __DIR__ . '/../autoload.php';
require_once __DIR__ . '/../../vendor/autoload.php';

use PHPUnit_Framework_TestCase;
use StormChat\Controller;
use StormChat\DB_Handler;
use function StormChat\select_columns;

class ControllerTest extends PHPUnit_Framework_TestCase
{
    ////////
    //SETUP:

    /** @var DB_Handler|\PHPUnit_Framework_MockObject_MockObject */
    private static $handler = null;
    /** @var Controller */
    private static $controller = null;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::$handler = self::getMockBuilder(DB_Handler::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([["host" => "", "user" => "", "password" => "", "db" => ""]])
            ->setMethodsExcept()
            ->getMock();
        self::$controller = new Controller(self::$handler);
    }

    ///////
    //TEST:

    public function test_create_user() {
        self::$handler->method('create_user')->willReturn(1);
        $actual =  self::$controller->create_user("artsi");
        $this->assertEquals(1, $actual["id"]);
        $this->assertJson(json_encode($actual["token"]));  # i.e. AssertIsEncodableInJSON
    }

// TODO:
//    public function test_get_user() {
//        self::$handler->method('get_user')->willReturn(['user_id' => ]);
//        $actual =  self::$controller->get_user("artsi");
//        var_dump($actual);
//        $this->assertEquals(1, $actual["id"]);
//        $this->assertJson(json_encode($actual["token"]));  # i.e. AssertIsEncodableInJSON
//    }

    public function test_is_user_in_room() {
        self::$handler->method('get_user')->willReturn(
            ['user_id' => 1, 'chat_id' => 1],   //User in room
            ['user_id' => 1, 'chat_id' => 2],   //User in different room
            false                               //User not found
        );

        //User in room:
        $actual = self::$controller->is_user_in_room(1, 1);
        $this->assertEquals(true, $actual);

        //User in different room:
        $user['chat_id'] = 2;
        $actual = self::$controller->is_user_in_room(1, 1);
        $this->assertEquals(false, $actual);

        //User not found:
        $actual = self::$controller->is_user_in_room(1, 1);
        $this->assertEquals(false, $actual);
    }

    public function test_list_rooms() {
        self::$handler->method('get_groups')->willReturn([0 =>["chat_id"=> 1, "name"=>"ryhma1"], 1 =>["chat_id"=> 2, "name"=>"ryhma2"]]);
        $actual = self::$controller->list_rooms();
        self::assertEquals(1, $actual[0]["id"]);
        self::assertEquals(2, $actual[1]["id"]);
    }

    public function test_create_room() {
        self::$handler->method('create_group')->with($this->equalTo("ryhma"),$this->equalTo("passw"))->willReturn(1);
        $actual =  self::$controller->create_room("ryhma", "passw");
        self::assertEquals(1, $actual);
    }

    public function test_list_users() {
        self::$handler->method('get_chat_users')->with($this->equalTo(1))->willReturn([0 =>["user_id"=>1, "name"=>"artsi"], 1=>["user_id"=>2, "name"=>"tuomas"]]);
        $actual =  self::$controller->list_users(1);
        self::assertEquals("artsi", $actual[0]["name"]);
        self::assertEquals(1, $actual[0]["id"]);
        self::assertEquals("tuomas", $actual[1]["name"]);
        self::assertEquals(2, $actual[1]["id"]);
    }

    public function test_list_messages() {
        self::$handler->method('get_messages')->with($this->equalTo(1), $this->equalTo(1))->willReturn([0 =>["user_id" => 1, "content" => "Hello world", "message_id" => 3],
            1 => ["user_id" => 2, "content" => "dlrow olleH", "message_id" => 4]]);
        $actual =  self::$controller->list_messages(1, 1);
        self::assertEquals(3, $actual[0]["id"]);
        self::assertEquals("Hello world", $actual[0]["message"]);
        self::assertEquals(1, $actual[0]["user_id"]);
        self::assertEquals(4, $actual[1]["id"]);
        self::assertEquals("dlrow olleH", $actual[1]["message"]);
        self::assertEquals(2, $actual[1]["user_id"]);
    }

    public function test_post_message() {
        self::$handler->method('post_message')->with($this->equalTo(1), $this->equalTo(1), $this->equalTo( "Hello world"))->willReturn(1);
        $actual =  self::$controller->post_message(1, 1, "Hello world");
        self::assertEquals(1, $actual);
    }

    public function test_join_chat() {
        self::$handler->method('join_chat')->with($this->equalTo(1), $this->equalTo(1), $this->equalTo( "passw"))->willReturn(true);
        $actual =  self::$controller->join_room(1, 1, "passw");
        self::assertEquals(1, $actual);
    }

    public function test_get_workspace_content(){
        $chat_id = 101;
        $expected = ['content' => 'this is a text', 'last_update_id' => 111];
        self::$handler->method('get_workspace_content')->with($chat_id)->willReturn($expected);
        $actual = self::$controller->get_workspace_content($chat_id);
        self::assertEquals($expected, $actual);
    }

    public function test_get_workspace_update_inserts(){
        $chat_id = 1;
        $since = 5;
        $client_content = 'The quick brown fox jumps over the lazy dog.';
        $client_caret_pos = strpos($client_content, 'over');

        $pos_very = strpos($client_content, 'quick');
        $pos_too = strlen('very ') + strpos($client_content, 'lazy');

        $updates = [
            ['update_id' => 10, 'pos' => $pos_very, 'input' => 'very ', 'mode' => 0, 'user_id' => 2],
            ['update_id' => 12, 'pos' => $pos_too,  'input' => 'too ',  'mode' => 0, 'user_id' => 3],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);

        //Test that test properly formed:
        $expected = 'The very quick brown fox jumps ^over the too lazy dog.';
        $actual = $client_content;
        $actual = substr($actual, 0, $pos_very) . 'very ' . substr($actual, $pos_very);
        $actual = substr($actual, 0, $pos_too) . 'too ' . substr($actual, $pos_too);
        $expected_caret_pos = strpos($expected, '^');
        $actual = substr($actual, 0, $expected_caret_pos) . '^' . substr($actual, $expected_caret_pos);
        self::assertEquals($expected, $actual);

        //Test actual return values:
        $result = self::$controller->get_workspace_updates($chat_id, $since, $client_caret_pos);
        self::assertEquals($expected_caret_pos, $result['caret_pos'] );

        $expected_updates = $updates;
        foreach ($expected_updates as &$row) {
            $row['id'] = $row['update_id'];
            unset($row['update_id']);
            $row['mode'] = 'insert';
            $row['len'] = strlen($row['input']);
        }
        self::assertEquals($expected_updates, $result['updates']);
    }


    public function test_get_workspace_update_removals(){
        $chat_id = 1;
        $since = 5;
        $client_content = 'The quick brown fox jumps over the lazy dog.';
        $client_caret_pos = strpos($client_content, 'er the');

        $len_quick = strlen(' quick');
        $len_over = strlen(' over');
        $len_lazy = strlen(' lazy');

        $pos_quick = strpos($client_content, ' brown');
        $pos_over = -$len_quick + strpos($client_content, ' the lazy');
        $pos_lazy = -$len_quick - $len_over + strpos($client_content, ' dog.');

        $updates = [
            ['update_id' => 10, 'pos' => $pos_quick, 'input' => str_repeat(' ', $len_quick), 'mode' => 1, 'user_id' => 2],
            ['update_id' => 12, 'pos' => $pos_over,  'input' => str_repeat(' ', $len_over),  'mode' => 1, 'user_id' => 3],
            ['update_id' => 12, 'pos' => $pos_lazy,  'input' => str_repeat(' ', $len_lazy),  'mode' => 1, 'user_id' => 4],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);

        //Test that test properly formed:
        $expected = 'The brown fox jumps^ the dog.';
        $actual = $client_content;
        $actual = substr($actual, 0, $pos_quick - $len_quick) . substr($actual, $pos_quick);
        $actual = substr($actual, 0, $pos_over - $len_over) . substr($actual, $pos_over);
        $actual = substr($actual, 0, $pos_lazy - $len_lazy) . substr($actual, $pos_lazy);
        $expected_caret_pos = strpos($expected, '^');
        $actual = substr($actual, 0, $expected_caret_pos) . '^' . substr($actual, $expected_caret_pos);
        self::assertEquals($expected, $actual);

        //Test actual return values:
        $result = self::$controller->get_workspace_updates($chat_id, $since, $client_caret_pos);
        self::assertEquals($expected_caret_pos, $result['caret_pos'] );

        $expected_updates = $updates;
        foreach ($expected_updates as &$row) {
            $row['id'] = $row['update_id'];
            unset($row['update_id']);
            $row['mode'] = 'remove';
            $row['len'] = strlen($row['input']);
            $row['input'] = '';
        }
        self::assertEquals($expected_updates, $result['updates']);
    }

    public function test_workspace_insert_with_differing_caret_pos(){
        $user_id = 1;
        $other_user_id = 2;
        $chat_id = 1;
        $since = 5;
        $input = ' too';
        $original_content = 'The quick brown fox jumps over the lazy dog.';
//        $client_content   = 'The quick brown fox jumps over the too lazy dog.';
        $server_content   = 'The very quick brown fox jumps over the lazy dog.';
        $expected_content = 'The very quick brown fox jumps over the too lazy dog.';
        $client_input_pos = strpos($original_content, ' lazy dog');
        $server_input_pos = strpos($server_content, ' lazy dog');

        $pos_very = strpos($original_content, 'quick');
        $updates = [
            ['update_id' => 10, 'pos' => $pos_very, 'input' => ' very', 'mode' => 0, 'user_id' => $other_user_id],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);
        self::$handler->method('get_workspace_content')->with($chat_id)->willReturn(
            ['content' => $server_content, 'last_update' => 10]
        );
        self::$handler->method('workspace_insert')->with($chat_id, $user_id, $server_input_pos, $input)->willReturn(15);
        self::$handler->method('set_workspace_content')->with($chat_id, $expected_content)->willReturn(true);

        $update_id = self::$controller->workspace_insert($chat_id, $user_id, $client_input_pos, $since, $input);
        self::assertEquals(15, $update_id);
    }

    public function test_workspace_removal_with_differing_caret_pos(){
        $user_id = 1;
        $other_user_id = 2;
        $chat_id = 1;
        $since = 5;
        $len = strlen('az');
        $original_content = 'The quick brown fox jumps over the lazy dog.';
//        $client_content   = 'The quick brown fox jumps over ly the dog.';
        $server_content   = 'The brown fox jumps over the lazy dog.';
        $expected_content = 'The brown fox jumps over the ly dog.';
        $client_input_pos = strpos($original_content, 'y dog');
        $server_input_pos = strpos($server_content, 'y dog');

        $pos_very = strpos($original_content, 'quick');
        $updates = [
            ['update_id' => 10, 'pos' => $pos_very, 'input' => 'quick ', 'mode' => 1, 'user_id' => $other_user_id],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);
        self::$handler->method('get_workspace_content')->with($chat_id)->willReturn(
            ['content' => $server_content, 'last_update' => 10]
        );
        self::$handler->method('workspace_remove')->with($chat_id, $user_id, $server_input_pos, $len)->willReturn(15);
        self::$handler->method('set_workspace_content')->with($chat_id, $expected_content)->willReturn(true);

        $update_id = self::$controller->workspace_remove($chat_id, $user_id, $client_input_pos, $since, $len);
        self::assertEquals(15, $update_id);
    }

    public function test_workspace_insert_when_client_desynced_with_own_input(){
        $user_id = 1;
        $other_user_id = 2;
        $chat_id = 1;
        $since = 5;
        $update_id = $since;
        $input = "a";
        $original_content = "The quick brown fox jumps over the lazy dog.";
        $client_content   = "The quick 'ready' brown fox jumps over the lazy dog.";

        $server_content = $original_content;
        $pos_rm_quick = strpos($server_content, 'brown');
        $server_content = 'The brown fox jumps over the lazy dog.';
        $pos_in_hyph = strpos($server_content, 'brown');
        $server_content = "The '' brown fox jumps over the lazy dog.";
        $pos_in_very = strpos($server_content, 'lazy');
        $server_content = "The '' brown fox jumps over the very lazy dog.";
        $pos_in_redy = strpos($server_content, "' brown");
        $server_content = "The 'redy' brown fox jumps over the very lazy dog.";

        $client_input_pos = strpos($client_content, "ady' brown");
        $server_input_pos = strpos($server_content, "dy' brown");
        $expected_content = "The 'ready' brown fox jumps over the very lazy dog.";

        $updates = [
            ['update_id' => ++$update_id, 'pos' => $pos_rm_quick, 'input' => 'quick ', 'mode' => 1, 'user_id' => $other_user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_in_hyph, 'input' => "'' ", 'mode' => 0, 'user_id' => $user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_in_very, 'input' => 'very ', 'mode' => 0, 'user_id' => $other_user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_in_redy, 'input' => 'redy', 'mode' => 0, 'user_id' => $user_id],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);
        self::$handler->method('get_workspace_content')->with($chat_id)->willReturn(
            ['content' => $server_content, 'last_update' => $update_id]
        );
        self::$handler->method('workspace_insert')->with($chat_id, $user_id, $server_input_pos, $input)->willReturn(++$update_id);
        self::$handler->method('set_workspace_content')->with($chat_id, $expected_content)->willReturn(true);

        $actual_update_id = self::$controller->workspace_insert($chat_id, $user_id, $client_input_pos, $since, $input);
        self::assertEquals($update_id, $actual_update_id);
    }

    public function test_workspace_remove_when_client_desynced_with_own_input(){
        $user_id = 1;
        $other_user_id = 2;
        $chat_id = 1;
        $since = 5;
        $update_id = $since;
        $len = strlen("mps ");
        $original_content = "The quick brown fox jumps over the lazy dog.";
        $client_content_before_removal = "The quick fox mps over the dog.";

        $server_content = $original_content;
        $pos_in_very = strpos($server_content, 'quick');
        self::assertEquals(
            substr($server_content,0, $pos_in_very) . "very " . substr($server_content, $pos_in_very),
            $server_content = 'The very quick brown fox jumps over the lazy dog.'
        );
        $pos_rm_brown = strpos($server_content, 'fox');
        self::assertEquals(
            substr($server_content,0, $pos_rm_brown - strlen("brown ")) . substr($server_content, $pos_rm_brown),
            $server_content = "The very quick fox jumps over the lazy dog."
        );
        $pos_in_black = strpos($server_content, 'lazy');
        self::assertEquals(
            substr($server_content,0, $pos_in_black) . "black " . substr($server_content, $pos_in_black),
            $server_content = "The very quick fox jumps over the black lazy dog."
        );
        $pos_rm_lazy = strpos($server_content, "dog");
        self::assertEquals(
            substr($server_content,0, $pos_rm_lazy - strlen("lazy ")) . substr($server_content, $pos_rm_lazy),
            $server_content = "The very quick fox jumps over the black dog."
        );
        $pos_rm_ver = strpos($server_content, 'y quick');
        self::assertEquals(
            substr($server_content,0, $pos_rm_ver - strlen("ver")) . substr($server_content, $pos_rm_ver),
            $server_content = 'The y quick fox jumps over the black dog.'
        );
        $pos_rm_ju = strpos($server_content, 'mps over');
        self::assertEquals(
            substr($server_content,0, $pos_rm_ju - strlen("ju")) . substr($server_content, $pos_rm_ju),
            $server_content = 'The y quick fox mps over the black dog.'
        );

        $client_input_pos = strpos($client_content_before_removal, "over");
        $server_input_pos = strpos($server_content, "over");
        $expected_content = 'The y quick fox over the black dog.';

        $updates = [
            ['update_id' => ++$update_id, 'pos' => $pos_in_very, 'input' => 'very ', 'mode' => 0, 'user_id' => $other_user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_rm_brown, 'input' => "brown ", 'mode' => 1, 'user_id' => $user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_in_black, 'input' => 'black ', 'mode' => 0, 'user_id' => $other_user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_rm_lazy, 'input' => 'lazy ', 'mode' => 1, 'user_id' => $user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_rm_ver, 'input' => 'ver', 'mode' => 1, 'user_id' => $other_user_id],
            ['update_id' => ++$update_id, 'pos' => $pos_rm_ju, 'input' => 'ju', 'mode' => 1, 'user_id' => $user_id],
        ];
        self::$handler->method('get_workspace_updates')->with($chat_id, $since)->willReturn($updates);
        self::$handler->method('get_workspace_content')->with($chat_id)->willReturn(
            ['content' => $server_content, 'last_update' => $update_id]
        );
        self::$handler->method('workspace_remove')->with($chat_id, $user_id, $server_input_pos, $len)->willReturn(++$update_id);
        self::$handler->method('set_workspace_content')->with($chat_id, $expected_content)->willReturn(true);

        $actual_update_id = self::$controller->workspace_remove($chat_id, $user_id, $client_input_pos, $since, $len);
        self::assertEquals($update_id, $actual_update_id);
    }

}
