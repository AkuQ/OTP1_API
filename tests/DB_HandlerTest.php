<?php

namespace StormChat;
use PHPUnit_Framework_TestCase;

require_once __DIR__."/../src/autoload.php";
$get_date_return = ['year' => 2000, 'mon' => 11, 'mday' => 11, 'h' => 23, 'i' => 40, 's' => 20 ];

function getdate()
{
    global $get_date_return;
    return $get_date_return;
}
function date($param)
{
    global $get_date_return;
    return $get_date_return['year']."-".$get_date_return['mon']."-".$get_date_return['mday']." ".
        $get_date_return['h'].":".$get_date_return['i'].":".$get_date_return['s'];

}
class DB_HandlerTest extends PHPUnit_Framework_TestCase
{
    private static $connection = null;
    private static $handler = null;

    static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::$handler = new DB_Handler("testdb.txt");
        self::$connection = self::$handler->connect();
        $sql_create_tables = file_get_contents("../db/create_tables.sql");
        $sql = explode(";", $sql_create_tables);
        self::$connection->query("SET FOREIGN_KEY_CHECKS = 0");
        self::$connection->query("DROP TABLE IF EXISTS chat, user, message, workspace, workspace_line, line_lock");
        self::$connection->query("SET FOREIGN_KEY_CHECKS = 1");
        foreach ($sql as $item) {
            self::$connection->query($item);
        }



    }

    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::$connection->query("SET FOREIGN_KEY_CHECKS = 0");
        self::$connection->query("TRUNCATE chat");
        self::$connection->query("TRUNCATE user");
        self::$connection->query("TRUNCATE message");
        self::$connection->query("TRUNCATE workspace");
        self::$connection->query("TRUNCATE workspace_line");
        self::$connection->query("TRUNCATE line_lock");
        self::$connection->query("SET FOREIGN_KEY_CHECKS = 1");

    }

    static function tearDownAfterClass()
    {
        parent::tearDownAfterClass();
        self::$connection->close();// TODO: Change the autogenerated stub
    }

    public function testGetChatGroups()
    {
        global $get_date_return;
        $get_date_return['year'] = 2000;
        self::$handler->create_group("ryhma1", "pw1");
        $get_date_return['year'] = 1800;
        self::$handler->create_group("ryhma2", "pw2");
        $get_date_return['year'] = 2000;
        $groups = self::$handler->get_groups();
        $this->assertEquals(1, count($groups));
        $this->assertEquals("ryhma1", $groups[0]["name"]);
        $this->assertEquals(1, $groups[0]["chat_id"]);

    }

    public function testCreateUser()
    {

        $return = self::$handler->create_user("arto");
        $result = self::$connection->query("SELECT * FROM user");
        $row = $result->fetch_assoc();
        $this->assertEquals("arto", $row["name"]);
        $this->assertEquals($return["token"], $row["token"]);
        $this->assertEquals($return["id"], $row["user_id"]);
        $this->assertEquals(date("null"), $row["created"]);
        $this->assertEquals(date("null"), $row["updated"]);



    }

    public function testCreateGroup()
    {
        self::$handler->create_group("ryhmaa", "pw1");
        self::$handler->create_group("ryhmab", "pw2");
        $result = self::$connection->query("SELECT * FROM chat");
        $pass_one = hash('sha256', "pw1");
        $pass_two = hash('sha256', "pw2");
        $row = $result->fetch_assoc();
        $this->assertEquals("ryhmaa", $row["name"]);
        $this->assertEquals(1, $row["chat_id"]);
        $this->assertEquals($pass_one, $row["password"]);
        $this->assertEquals(date("null"), $row["created"]);
        $this->assertEquals(date("null"), $row["updated"]);
        $row = $result->fetch_assoc();
        $this->assertEquals("ryhmab", $row["name"]);
        $this->assertEquals(2, $row["chat_id"]);
        $this->assertEquals($pass_two, $row["password"]);
        $this->assertEquals(date("null"), $row["created"]);
        $this->assertEquals(date("null"), $row["updated"]);

    }

    public function testJoinChat() {
        self::$handler->create_group("ryhmaa", "pw1");
        $return = self::$handler->create_user("arto");
        $bool = self::$handler->join_chat(0, $return["id"], "pw1");
        $this->assertEquals("true", $bool);

    }


}
